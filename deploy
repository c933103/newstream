#!/bin/bash

ismigrate='false'
gitdeploy='false'

print_usage() {
    printf "%s\n" "Usage: ./deploy [-h] [-m] [-g]" "zero flags = rsync and restart" "-h is for help" "-m is for migration at remote django before restarting gunicorn" "-g is for git deploy"
}

while getopts 'mgh' flag; do
    case "${flag}" in
        m) ismigrate='true' ;;
        g) gitdeploy='true' ;;
        h) print_usage
           exit 1 ;;
    esac
done

rsync="rsync -av --exclude '.git' ./ diff-1:/srv/www/omp/"
ssh='ssh diff-1'
source='cd /srv/www/omp && source ~/.profile && source venv/bin/activate && export LC_ALL="en_US.UTF-8"'
migrate='python manage.py makemigrations && python manage.py migrate'
startg='sudo supervisorctl start omp'
stopg='sudo supervisorctl stop omp'
restart_gunicorn='sudo supervisorctl restart omp'

cmd="$rsync && $ssh '${source} && ${restart_gunicorn}'"
if [ $ismigrate = 'true' ]; then
    # migrate script also restarts gunicorn
    cmd="$rsync && $ssh '${source} && ${migrate} && ${restart_gunicorn}'"
fi
if [ $gitdeploy = 'true' ]; then
    # git pull on remote and migrate
    cmd="$ssh 'cd /srv/www/omp && rm \$(git ls-files -o -X .gitignore) && git reset --hard && git pull && ${source} && ${migrate} && ${restart_gunicorn}'"
fi

echo $cmd
eval $cmd
